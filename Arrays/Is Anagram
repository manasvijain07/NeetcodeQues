
Is Anagram

Given two strings s and t, return true if the two strings are anagrams of each other, otherwise return false.

An anagram is a string that contains the exact same characters as another string, but the order of the characters can be different.

Example 1:

Input: s = "racecar", t = "carrace"

Output: true
Example 2:

Input: s = "jar", t = "jam"

Output: false
Constraints:

s and t consist of lowercase English letters.
-----------------------------------

Sol 1 - sorting
Tc - O(n log n)
SC - O(n)

class Solution {
    public boolean isAnagram(String s, String t) {
        if(s.length() != t.length())
        {
            return false;
        }
        char[] s1 = s.toCharArray();
        Arrays.sort(s1);
        char [] t1 = t.toCharArray();
        Arrays.sort(t1);

        for(int i = 0; i < s1.length; i++)
        {
            if(s1[i] != t1[i])
            {
                return false;
            }
        }
        return true;
    }
}

---------------------------------------

Sol 2 - Using hashmap
TC - O(n)
SC - O(1)

class Solution {
    public boolean isAnagram(String s, String t) {
        if(s.length() != t.length())
        {
            return false;
        }

        HashMap<Character, Integer> map = new HashMap<>();

        for(int i = 0; i < s.length(); i++)
        {
            map.put(s.charAt(i), map.getOrDefault(s.charAt(i), 0) + 1);
        }

        for(int i = 0; i < t.length(); i++)
        {
            if(!map.containsKey(t.charAt(i)))
            {
                return false;
            }
            int freq = map.get(t.charAt(i));
            if(freq - 1 == 0)
            {
                map.remove(t.charAt(i));
            }
            else
                map.put(t.charAt(i), freq-1);
        }
        return map.isEmpty();
    }
}
