Top K Frequent Elements
Given an integer array nums and an integer k, return the k most frequent elements. You may return the answer in any order.

 

Example 1:

Input: nums = [1,1,1,2,2,3], k = 2
Output: [1,2]
Example 2:

Input: nums = [1], k = 1
Output: [1]
 

Constraints:

1 <= nums.length <= 105
-104 <= nums[i] <= 104
k is in the range [1, the number of unique elements in the array].
It is guaranteed that the answer is unique.
 

Follow up: Your algorithm's time complexity must be better than O(n log n), where n is the array's size.
---------------------------------------------

Sol 1 - 
Tc - 
SC - 

class Solution {
    public int[] topKFrequent(int[] nums, int k) {
        HashMap<Integer, Integer> map = new HashMap<>();
        int[] res = new int[k];
        PriorityQueue<Pair<Integer, Integer>> pq = new PriorityQueue<>
        ((a, b) -> a.getValue() - b.getValue());

        for(int i = 0; i < nums.length; i++)
        {
            map.put(nums[i], map.getOrDefault(nums[i], 0) + 1);
        }

        for(Map.Entry<Integer, Integer> val : map.entrySet())
        {
            pq.add(new Pair(val.getKey(), val.getValue()));
            if(pq.size() > k)
            {
                pq.poll();
            }
        }

        int i = 0;
        for(Pair<Integer, Integer> pair : pq)
        {
            res[i++] = pair.getKey();
        }
        return res;
    }
}
